{"version":3,"sources":["node_modules/sine-waves/sine-waves.js","index.js"],"names":["setWavesWidth","waves","document","getElementById","clientWidth","body","documentElement","style","width","setWaves","SineWaves","el","speed","height","rotate","ease","waveWidth","timeModifier","lineWidth","amplitude","window","devicePixelRatio","wavelength","strokeStyle","type","x","sine"],"mappings":"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A;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"jdrd.e31bb0bc.js","sourceRoot":"..","sourcesContent":["/*!\n _______ _____ __   _ _______      _  _  _ _______ _    _ _______ _______\n |______   |   | \\  | |______      |  |  | |_____|  \\  /  |______ |______\n ______| __|__ |  \\_| |______      |__|__| |     |   \\/   |______ ______|\n                                                                         \n sine-waves v0.3.0 <https://github.com/isuttell/sine-waves>\n Contributor(s): Isaac Suttell <isaac@isaacsuttell.com>\n Last Build: 2014-12-03\n Do not edit this file. It is created from the src/ folder.\n*/\n(function(root, factory) {\n  'use strict';\n  if (typeof define === 'function' && typeof define.amd === 'object') {\n    define([], function() {\n      return factory(root);\n    });\n  } else {\n    root.SineWaves = factory(root);\n  }\n})(this, function() {\n  'use strict';\n\n/************************************************\n * @file  Polyfills for older browsers\n * @author  Isaac Suttell\n ************************************************/\n\n/**\n * Bind polyfill\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\n */\n/* istanbul ignore next */\nif (!Function.prototype.bind) {\n  Function.prototype.bind = function(oThis) {\n    if (typeof this !== 'function') {\n      // closest thing possible to the ECMAScript 5\n      // internal IsCallable function\n      throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');\n    }\n\n    var aArgs = Array.prototype.slice.call(arguments, 1);\n    var fToBind = this;\n    var fNOP = function() {};\n    var fBound = function() {\n      return fToBind.apply(this instanceof fNOP &&\n        oThis ? this : oThis,\n        aArgs.concat(Array.prototype.slice.call(arguments)));\n    };\n\n    fNOP.prototype = this.prototype;\n    fBound.prototype = new fNOP(); // jshint ignore:line\n\n    return fBound;\n  };\n}\n\n/**\n * Request Animation Polyfill\n * https://gist.github.com/paulirish/1579671\n *\n * @type {Array}\n */\n/* istanbul ignore next */\nvar vendors = ['ms', 'moz', 'webkit', 'o'];\n/* istanbul ignore next */\nfor (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\n  window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];\n  window.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] ||\n    window[vendors[x] + 'CancelRequestAnimationFrame'];\n}\n\n/* istanbul ignore next */\nif (!window.requestAnimationFrame) {\n  var lastFrameTime = 0;\n  window.requestAnimationFrame = function(callback) {\n    var currTime = new Date().getTime();\n    var timeToCall = Math.max(0, 16 - (currTime - lastFrameTime));\n    var id = window.setTimeout(function() {\n        callback(currTime + timeToCall);\n      },\n      timeToCall);\n    lastFrameTime = currTime + timeToCall;\n    return id;\n  };\n}\n\n/* istanbul ignore next */\nif (!window.cancelAnimationFrame) {\n  window.cancelAnimationFrame = function(id) {\n    clearTimeout(id);\n  };\n}\n\n/************************************************\n * @file  Constants\n * @author  Isaac Suttell\n ************************************************/\n\n/**\n * For radian conversion\n *\n * @constant\n * @type    {Number}\n */\nvar PI180 = Math.PI / 180;\n\n/**\n * Twice of PI\n *\n * @constant\n * @type {Number}\n */\nvar PI2 = Math.PI * 2;\n\n/**\n * Half of PI\n *\n * @constant\n * @type {Number}\n */\nvar HALFPI = Math.PI / 2;\n\n/************************************************\n * @file  General utility functions\n * @author  Isaac Suttell\n ************************************************/\n\n/**\n * Utilities wrapper\n *\n * @type    {Object}\n */\nvar Utilities = {};\n\n/**\n * Checks to see if a var is a speficied type\n *\n * @param  {Mixed}  obj  var to check\n *\n * @return {Boolean}\n */\nvar isType = Utilities.isType = function(obj, type) {\n  var result = {}.toString.call(obj).toLowerCase();\n  return result === '[object ' + type.toLowerCase() + ']';\n};\n\n/**\n * Checks to see if a var is a function\n *\n * @alias  isType\n * @param  {Mixed}  fn  var to check\n *\n * @return {Boolean}\n */\nvar isFunction = Utilities.isFunction = function(fn) {\n  return isType(fn, 'function');\n};\n\n/**\n * Checks to see if a var is a string\n *\n * @alias  isType\n * @param  {Mixed}  str  var to check\n *\n * @return {Boolean}\n */\nvar isString = Utilities.isString = function(str) {\n  return isType(str, 'string');\n};\n\n/**\n * Checks to see if a var is a number\n *\n * @alias  isType\n * @param  {Mixed}  num  var to check\n *\n * @return {Boolean}\n */\nvar isNumber = Utilities.isNumber = function(num) {\n  return isType(num, 'number');\n};\n\n/**\n * Create a clone of an object\n *\n * @param  {Object} src Object to clone\n *\n * @return {Object}\n */\nvar shallowClone = Utilities.shallowClone = function(src) {\n  var dest = {};\n  for (var i in src) {\n    if (src.hasOwnProperty(i)) {\n      dest[i] = src[i];\n    }\n  }\n  return dest;\n};\n\n/**\n * Basic Extend Function\n *\n * @param     {Object}    dest   object to fill\n * @param     {Object}    src    object to copy\n *\n * @return    {Object}\n */\nvar defaults = Utilities.defaults = function(dest, src) {\n  if (!isType(src, 'object')) { src = {}; }\n  var clone = shallowClone(dest);\n  for (var i in src) {\n    if (src.hasOwnProperty(i)) {\n      clone[i] = src[i];\n    }\n  }\n  return clone;\n};\n\n/**\n * Convert degress to radians for rotation function\n *\n * @param     {Number}    degrees\n *\n * @return    {Number}\n */\nvar degreesToRadians = Utilities.degreesToRadians = function(degrees) {\n  if (!isType(degrees, 'number')) {\n    throw new TypeError('Degrees is not a number');\n  }\n  return degrees * PI180;\n};\n\n/**\n * You can either directly specify a easing function, use a built in function\n * or default to the basic SineInOut\n *\n * @param     {Object}   obj     Object to search in\n * @param     {Mixed}    name    String || Function\n * @param     {String}   def     Default funciton\n *\n * @return    {Function}\n */\nvar getFn = Utilities.getFn = function(obj, name, def) {\n  if (isFunction(name)) {\n    return name;\n  } else if (isString(name) && isFunction(obj[name.toLowerCase()])) {\n    return obj[name.toLowerCase()];\n  } else {\n    return obj[def];\n  }\n};\n\n/************************************************\n * @file  Left to right easing functions\n * @author Isaac Suttell\n ************************************************/\n\n/**\n * This holds all of the easing objects and can be added to by the user\n *\n * @type    {Object}\n */\nvar Ease = {};\n\n/**\n * Do not apply any easing\n *\n * @param  {Number} percent   where in the line are we?\n * @param  {Number} amplitude the current strength\n *\n * @return {Number}           the new strength\n */\nEase.linear = function(percent, amplitude) {\n  return amplitude;\n};\n\n/**\n * Easing function to control how string each wave is from\n * left to right\n *\n * @param  {Number} percent   where in the line are we?\n * @param  {Number} amplitude the current strength\n *\n * @return {Number}           the new strength\n */\nEase.sinein = function(percent, amplitude) {\n  return amplitude * (Math.sin(percent * Math.PI - HALFPI) + 1) * 0.5;\n};\n\n/**\n * Easing function to control how string each wave is from\n * left to right\n *\n * @param  {Number} percent   where in the line are we?\n * @param  {Number} amplitude the current strength\n *\n * @return {Number}           the new strength\n */\nEase.sineout = function(percent, amplitude) {\n  return amplitude * (Math.sin(percent * Math.PI + HALFPI) + 1) * 0.5;\n};\n\n/**\n * Easing function to control how string each wave is from\n * left to right\n *\n * @param  {Number} percent   where in the line are we?\n * @param  {Number} amplitude the current strength\n *\n * @return {Number}           the new strength\n */\nEase.sineinout = function(percent, amplitude) {\n  return amplitude * (Math.sin(percent * PI2 - HALFPI) + 1) * 0.5;\n};\n\n/************************************************\n * @file  Sine Wave functions\n * @author Isaac Suttell\n ************************************************/\n\n/**\n * Holds the different types of waves\n *\n * @type    {Object}\n */\nvar Waves = {};\n\n/**\n * Default Sine Waves\n *\n * @param    {Number}    x\n */\nWaves.sine = function(x) {\n  return Math.sin(x);\n};\n\n/**\n * Alias for Sine\n *\n * @alias\n * @type    {Function}\n */\nWaves.sin = Waves.sine;\n\n/**\n * Sign polyfill\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign\n *\n * @param     {Number}    x\n *\n * @return    {Number}\n */\nWaves.sign = function(x) {\n  x = +x; // convert to a number\n  if (x === 0 || isNaN(x)) {\n    return x;\n  }\n  return x > 0 ? 1 : -1;\n};\n\n/**\n * Square Waves\n *\n * @param    {Number}    x\n */\nWaves.square = function(x) {\n  return Waves.sign(Math.sin(x * PI2));\n};\n\n/**\n * Sawtooth Waves\n *\n * @param    {Number}    x\n */\nWaves.sawtooth = function(x) {\n  return (x - Math.floor(x + 0.5)) * 2;\n};\n\n/**\n * Triangle Waves\n *\n * @param    {Number}    x\n */\nWaves.triangle = function(x) {\n  return Math.abs(Waves.sawtooth(x));\n};\n\n/************************************************\n * @file  Constructor and animation controller\n * @author  Isaac Suttell\n ************************************************/\n\n/**\n * Generates multiple customizable animated sines waves\n * using a canvas element. Supports retina displays and\n * limited mobile support\n */\nfunction SineWaves(options) {\n  // Save a reference\n  this.options = Utilities.defaults(this.options, options);\n\n  // Make sure we have a cancas\n  this.el = this.options.el;\n  delete this.options.el;\n  if (!this.el) {\n    throw 'No Canvas Selected';\n  }\n\n  // Setup the context for reference\n  this.ctx = this.el.getContext('2d');\n\n  // Do we have any waves\n  this.waves = this.options.waves;\n  delete this.options.waves;\n  if (!this.waves || !this.waves.length) {\n    throw 'No waves specified';\n  }\n\n  // DPI\n  this.dpr = window.devicePixelRatio || 1;\n\n  // Setup canvas width/heights\n  this.updateDimensions();\n  window.addEventListener('resize', this.updateDimensions.bind(this));\n\n  // If the user supplied a resize event or init call it\n  this.setupUserFunctions();\n\n  // Setup Easing\n  this.easeFn = Utilities.getFn(Ease, this.options.ease, 'linear');\n\n  // Set the canvas rotation\n  this.rotation = Utilities.degreesToRadians(this.options.rotate);\n\n  // Should we start running?\n  if (Utilities.isType(this.options.running, 'boolean')) {\n    this.running = this.options.running;\n  }\n\n  // Assign wave functions\n  this.setupWaveFns();\n\n  // Start the magic\n  this.loop();\n}\n\n/**\n * Default Options\n *\n * @type {Object}\n */\nSineWaves.prototype.options = {\n  speed: 10,\n  rotate: 0,\n  ease: 'Linear',\n  wavesWidth: '95%'\n};\n\n/**\n * Get the user wave function or one of the built in functions\n */\nSineWaves.prototype.setupWaveFns = function() {\n  var index = -1;\n  var length = this.waves.length;\n  while (++index < length) {\n    this.waves[index].waveFn = Utilities.getFn(Waves, this.waves[index].type, 'sine');\n  }\n};\n\n/**\n * Sets up the user resize event and the initialize event\n */\nSineWaves.prototype.setupUserFunctions = function() {\n  // User Resize Function\n  if (Utilities.isFunction(this.options.resizeEvent)) {\n    this.options.resizeEvent.call(this);\n    window.addEventListener('resize', this.options.resizeEvent.bind(this));\n  }\n\n  // User initialize\n  if (Utilities.isFunction(this.options.initialize)) {\n    this.options.initialize.call(this);\n  }\n};\n\n/**\n * Defaults for each line created\n *\n * @type {Object}\n */\nvar defaultWave = {\n  timeModifier: 1,\n  amplitude: 50,\n  wavelength: 50,\n  segmentLength: 10,\n  lineWidth: 1,\n  strokeStyle: 'rgba(255, 255, 255, 0.2)',\n  type: 'Sine'\n};\n\n/**\n * Takes either pixels or percents and calculates how wide the sine\n * waves should be\n *\n * @param     {Mixed}    value    0, '10px', '90%'\n * @param     {Number}   width    Width for percentages\n *\n * @return    {Number}\n */\nfunction getWaveWidth(value, width) {\n  if (Utilities.isType(value, 'number')) {\n    return value;\n  }\n\n  value = value.toString();\n  if (value.indexOf('%') > -1) {\n    value = parseFloat(value);\n    if (value > 1) {\n      value /= 100;\n    }\n    return width * value;\n  } else if (value.indexOf('px') > -1) {\n    return parseInt(value, 10);\n  }\n}\n\n/**\n * Get the height or width from a number, function or fallback\n * to the default client dimension\n *\n * @param    {Mixed}   dimension   This can be a function or number\n *\n * @return   {Number}\n */\nSineWaves.prototype.getDimension = function(dimension) {\n  if (Utilities.isNumber(this.options[dimension])) {\n    return this.options[dimension];\n  } else if (Utilities.isFunction(this.options[dimension])) {\n    return this.options[dimension].call(this, this.el);\n  } else if (dimension === 'width') {\n    return this.el.clientWidth;\n  } else if (dimension === 'height') {\n    return this.el.clientHeight;\n  }\n};\n\n/**\n * Internal resize event to make the canvas fill the screen\n */\nSineWaves.prototype.updateDimensions = function() {\n  // Dimensions\n  var width = this.getDimension('width');\n  var height = this.getDimension('height');\n\n  // Apply DPR for retina devices\n  this.width = this.el.width = width * this.dpr;\n  this.height = this.el.height = height * this.dpr;\n\n  // Scale down\n  this.el.style.width = width + 'px';\n  this.el.style.height = height + 'px';\n\n  // Padding\n  this.waveWidth = getWaveWidth(this.options.wavesWidth, this.width);\n\n  // Center it\n  this.waveLeft = (this.width - this.waveWidth) / 2;\n\n  // Vertical center\n  this.yAxis = this.height / 2;\n};\n\n/**\n * Clear the canvas so we can redraw\n */\nSineWaves.prototype.clear = function() {\n  this.ctx.clearRect(0, 0, this.width, this.height);\n};\n\n/**\n * Starting time.\n *\n * @type {Number}\n */\nSineWaves.prototype.time = 0;\n\n/**\n * This updates each of the lines each loop we're running\n *\n * @param  {Number} time (optional) this can be called to\n *                       manually render lines at a certian\n *                       time.\n */\nSineWaves.prototype.update = function(time) {\n  this.time = this.time - 0.007;\n  if (typeof time === 'undefined') {\n    time = this.time;\n  }\n\n  var index = -1;\n  var length = this.waves.length;\n\n  // Clear Canvas\n  this.clear();\n\n  this.ctx.save();\n\n  if (this.rotation > 0) {\n    this.ctx.translate(this.width / 2, this.height / 2);\n    this.ctx.rotate(this.rotation);\n    this.ctx.translate(-this.width / 2, -this.height / 2);\n  }\n\n  // Draw each line\n  while (++index < length) {\n    var timeModifier = this.waves[index].timeModifier || 1;\n    this.drawWave(time * timeModifier, this.waves[index]);\n  }\n  this.ctx.restore();\n\n  index = void 0;\n  length = void 0;\n};\n\n/**\n * Calculate the x, y coordinates of a point in a sine wave\n *\n * @param  {Number} time     Internal time index\n * @param  {Number} position Pixels x poistion\n * @param  {Object} options  Wave options\n *\n * @return {Object}          {x, y}\n */\nSineWaves.prototype.getPoint = function(time, position, options) {\n  var x = (time * this.options.speed) + (-this.yAxis + position) / options.wavelength;\n  var y = options.waveFn.call(this, x, Waves);\n\n  // Left and Right Sine Easing\n  var amplitude = this.easeFn.call(this, position / this.waveWidth, options.amplitude);\n\n  x = position + this.waveLeft;\n  y = amplitude * y + this.yAxis;\n\n  return {\n    x: x,\n    y: y\n  };\n};\n\n/**\n * Draws one line on the canvas\n *\n * @param  {Number} time    current internal clock time\n * @param  {Object} options wave options\n */\nSineWaves.prototype.drawWave = function(time, options) {\n  // Setup defaults\n  options = Utilities.defaults(defaultWave, options);\n\n  // Styles\n  this.ctx.lineWidth = options.lineWidth * this.dpr;\n  this.ctx.strokeStyle = options.strokeStyle;\n  this.ctx.lineCap = 'butt';\n  this.ctx.lineJoin = 'round';\n  this.ctx.beginPath();\n\n  // Starting Line\n  this.ctx.moveTo(0, this.yAxis);\n  this.ctx.lineTo(this.waveLeft, this.yAxis);\n\n  var i;\n  var point;\n\n  for (i = 0; i < this.waveWidth; i += options.segmentLength) {\n    // Calculate where the next point is\n    point = this.getPoint(time, i, options);\n\n    // Draw to it\n    this.ctx.lineTo(point.x, point.y);\n\n    // Clean up\n    point = void 0;\n  }\n\n  // Clean  up\n  i = void 0;\n  options = void 0;\n\n  // Ending Line\n  this.ctx.lineTo(this.width, this.yAxis);\n\n  // Stroke it\n  this.ctx.stroke();\n};\n\n/**\n * Animation Status\n *\n * @type {Boolean}\n */\nSineWaves.prototype.running = true;\n\n/**\n * Animation Loop Controller\n */\nSineWaves.prototype.loop = function() {\n  if (this.running === true) {\n    this.update();\n  }\n\n  window.requestAnimationFrame(this.loop.bind(this));\n};\n\n/**\n * Make the Wave functions available\n *\n * @type    {Object}\n */\nSineWaves.prototype.Waves = Waves;\n\n/**\n * Make the Ease functions available\n *\n * @type    {Object}\n */\nSineWaves.prototype.Ease = Ease;\n  return SineWaves;\n});","import { SineWaves } from \"sine-waves\";\n// import throttle from 'lodash/throttle'\n\n// set waves width\nconst setWavesWidth = () => {\n  const waves = document.getElementById(\"waves\");\n  const clientWidth =\n    document.body.clientWidth || document.documentElement.clientWidth;\n\n  waves.style.width = clientWidth + \"px\";\n  waves.width = clientWidth;\n};\n\n// setWavesWidth()\n\n// let resizeEventSetWavesWidth = throttle(setWavesWidth, 50)\n\n// window.addEventListener('resize', resizeEventSetWavesWidth, false)\n\nconst setWaves = () => {\n  new SineWaves({\n    // Canvas Element\n    el: document.getElementById(\"waves\"),\n\n    // General speed of entire wave system\n    speed: 0.75,\n\n    height: 68,\n    width: function() {\n      return document.body.clientWidth || document.documentElement.clientWidth;\n    },\n\n    // How many degress should we rotate all of the waves\n    rotate: 0,\n\n    // Ease function from left to right\n    ease: \"Linear\",\n\n    // Specific how much the width of the canvas the waves should be\n    // This can either be a number or a percent\n    waveWidth: \"400%\",\n\n    // An array of wave options\n    waves: [\n      {\n        timeModifier: 1, //速度\n        lineWidth: 1, //线条宽度\n        amplitude: 30 * window.devicePixelRatio, //波浪高度\n        wavelength: 125 * window.devicePixelRatio, //波长\n        strokeStyle: \"rgba(221,221,233,1)\", //颜色\n        type: function(x, waves) {\n          //自定义波浪类型\n          return waves.sine(x); // Combine two together\n        }\n      },\n      {\n        timeModifier: 1, //速度\n        lineWidth: 1, //线条宽度\n        amplitude: 30 * window.devicePixelRatio, //波浪高度\n        wavelength: 175 * window.devicePixelRatio, //波长\n        strokeStyle: \"rgba(221,221,233,1)\", //颜色\n        type: function(x, waves) {\n          //自定义波浪类型\n          return waves.sine(x + 8); // Combine two together\n        }\n      },\n      {\n        timeModifier: 1, //速度\n        lineWidth: 1, //线条宽度\n        amplitude: 30 * window.devicePixelRatio, //波浪高度\n        wavelength: 175 * window.devicePixelRatio, //波长\n        strokeStyle: \"#f00\", //颜色\n        type: function(x, waves) {\n          //自定义波浪类型\n          return waves.sine(x + 16); // Combine two together\n        }\n      }\n    ],\n  });\n};\n\nsetWaves();\n"]}